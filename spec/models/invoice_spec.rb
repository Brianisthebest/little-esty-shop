require 'rails_helper'

RSpec.describe Invoice, type: :model do
  describe "relationships" do
    it { should belong_to(:customer) }
    it { should have_many(:transactions) }
    it { should have_many(:invoice_items) }
    it { should have_many(:items).through(:invoice_items) }
    it { should have_many(:merchants).through(:items) }
  end
  
  describe 'validations' do
    it { should validate_presence_of(:status) }
    it { should define_enum_for(:status) }
  end

  describe "Class methods" do
    describe ":order_by_id" do
      it "orders all invoices by id" do
        customer_1 = create(:customer)
        invoice_3 = create(:invoice, id: 1, customer_id: @customer_1.id)
        invoice_2 = create(:invoice, id: 2 ,customer_id: @customer_1.id)
        invoice_1 = create(:invoice, id: 3 ,customer_id: @customer_1.id)
        expect(Invoice.order_by_id.first).to eq(invoice_3)
        expect(Invoice.order_by_id.second).to eq(invoice_2)
        expect(Invoice.order_by_id.third).to eq(invoice_1)
      end
    end

  end
  
  describe "instance methods" do

    describe 'customer_name' do
      it 'returns the name of the customer' do
        expect(@invoice_1.customer_name).to eq(@customer_1.first_name + " " + @customer_1.last_name)
      end
    end
    

    describe "#created_at_date" do
      it "converts timestamp format to a readable date" do
      customer_1 = create(:customer)
      invoice_1 = create(:invoice, customer_id: @customer_1.id, created_at: '2011-01-08 20:54:10 UTC')
      invoice_2 = create(:invoice, customer_id: @customer_1.id, created_at: '2012-05-11 13:54:10 UTC')
      invoice_3 = create(:invoice, customer_id: @customer_1.id, created_at: '2013-08-21 08:54:10 UTC')

      expect(invoice_1.convert_created_at).to eq('Saturday, January 08, 2011')
      expect(invoice_2.convert_created_at).to eq('Friday, May 11, 2012')
      expect(invoice_3.convert_created_at).to eq('Wednesday, August 21, 2013')
      end
    end

    describe "#total_revenue" do
      it "returns the total revenue generated by the invoice" do
        merchant_1 = create(:merchant)
        customer_1 = create(:customer)
        invoice_1 = create(:invoice, customer_id: customer_1.id)
        invoice_2 = create(:invoice, customer_id: customer_1.id)
        item_1 = create(:item, merchant_id: merchant_1.id)
        item_2 = create(:item, merchant_id: merchant_1.id)
        item_3 = create(:item, merchant_id: merchant_1.id)
        invoice_item_1 = create(:invoice_item, invoice_id: invoice_1.id, item_id: item_1.id, quantity: 1, unit_price: 100)
        invoice_item_2= create(:invoice_item, invoice_id: invoice_1.id, item_id: item_2.id, quantity: 100, unit_price: 10)
        invoice_item_3 = create(:invoice_item, invoice_id: invoice_1.id, item_id: item_3.id, quantity: 5, unit_price: 50)

        invoice_item_4 = create(:invoice_item, invoice_id: invoice_2.id, item_id: item_1.id, quantity: 0, unit_price: 0)
        invoice_item_5= create(:invoice_item, invoice_id: invoice_2.id, item_id: item_2.id, quantity: 6, unit_price: 6)
        invoice_item_6 = create(:invoice_item, invoice_id: invoice_2.id, item_id: item_3.id, quantity: 5, unit_price: 4)

        expect(invoice_1.total_revenue).to eq(1350)
        expect(invoice_2.total_revenue).to eq(56)
      end
    end

  end

end
